"""create whoop tables

Revision ID: ced0571063d0
Revises: a926409343df
Create Date: 2025-02-21 18:17:19.707019

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'ced0571063d0'
down_revision: Union[str, None] = 'a926409343df'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('whoop_users',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('first_name', sa.String(), nullable=False),
    sa.Column('last_name', sa.String(), nullable=False),
    sa.Column('height_meter', sa.Float(), nullable=False),
    sa.Column('weight_kilogram', sa.Float(), nullable=False),
    sa.Column('max_heart_rate', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('user_id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('whoop_cycles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('start', sa.DateTime(), nullable=False),
    sa.Column('end', sa.DateTime(), nullable=True),
    sa.Column('timezone_offset', sa.String(), nullable=False),
    sa.Column('score_state', sa.Enum('SCORED', 'PENDING_SCORE', 'UNSCORABLE', name='whoopscorestate'), nullable=False),
    sa.Column('raw_score', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('strain', sa.Float(), nullable=True),
    sa.Column('kilojoule', sa.Float(), nullable=True),
    sa.Column('average_heart_rate', sa.Integer(), nullable=True),
    sa.Column('max_heart_rate', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['whoop_users.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('whoop_sleep',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('start', sa.DateTime(), nullable=False),
    sa.Column('end', sa.DateTime(), nullable=False),
    sa.Column('timezone_offset', sa.String(), nullable=False),
    sa.Column('nap', sa.Boolean(), nullable=False),
    sa.Column('score_state', sa.Enum('SCORED', 'PENDING_SCORE', 'UNSCORABLE', name='whoopscorestate'), nullable=False),
    sa.Column('raw_score', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('total_in_bed_time_milli', sa.Integer(), nullable=True),
    sa.Column('total_awake_time_milli', sa.Integer(), nullable=True),
    sa.Column('total_no_data_time_milli', sa.Integer(), nullable=True),
    sa.Column('total_light_sleep_time_milli', sa.Integer(), nullable=True),
    sa.Column('total_slow_wave_sleep_time_milli', sa.Integer(), nullable=True),
    sa.Column('total_rem_sleep_time_milli', sa.Integer(), nullable=True),
    sa.Column('sleep_cycle_count', sa.Integer(), nullable=True),
    sa.Column('disturbance_count', sa.Integer(), nullable=True),
    sa.Column('baseline_milli', sa.Integer(), nullable=True),
    sa.Column('need_from_sleep_debt_milli', sa.Integer(), nullable=True),
    sa.Column('need_from_recent_strain_milli', sa.Integer(), nullable=True),
    sa.Column('need_from_recent_nap_milli', sa.Integer(), nullable=True),
    sa.Column('respiratory_rate', sa.Float(), nullable=True),
    sa.Column('sleep_performance_percentage', sa.Float(), nullable=True),
    sa.Column('sleep_consistency_percentage', sa.Float(), nullable=True),
    sa.Column('sleep_efficiency_percentage', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['whoop_users.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('whoop_workouts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('sport_id', sa.Enum('ACTIVITY', 'RUNNING', 'CYCLING', 'BASEBALL', 'BASKETBALL', 'ROWING', 'FENCING', 'FIELD_HOCKEY', 'FOOTBALL', 'GOLF', 'ICE_HOCKEY', 'LACROSSE', 'RUGBY', 'SAILING', 'SKIING', 'SOCCER', 'SOFTBALL', 'SQUASH', 'SWIMMING', 'TENNIS', 'TRACK_AND_FIELD', 'VOLLEYBALL', 'WATER_POLO', 'WRESTLING', 'BOXING', 'DANCE', 'PILATES', 'YOGA', 'WEIGHTLIFTING', 'CROSS_COUNTRY_SKIING', 'FUNCTIONAL_FITNESS', 'DUATHLON', 'GYMNASTICS', 'HIKING_RUCKING', 'HORSEBACK_RIDING', 'KAYAKING', 'MARTIAL_ARTS', 'MOUNTAIN_BIKING', 'POWERLIFTING', 'ROCK_CLIMBING', 'PADDLEBOARDING', 'TRIATHLON', 'WALKING', 'SURFING', 'ELLIPTICAL', 'STAIRMASTER', 'MEDITATION', 'OTHER', 'DIVING', 'OPERATIONS_TACTICAL', 'OPERATIONS_MEDICAL', 'OPERATIONS_FLYING', 'OPERATIONS_WATER', 'ULTIMATE', 'CLIMBER', 'JUMPING_ROPE', 'AUSTRALIAN_FOOTBALL', 'SKATEBOARDING', 'COACHING', 'ICE_BATH', 'COMMUTING', 'GAMING', 'SNOWBOARDING', 'MOTOCROSS', 'CADDYING', 'OBSTACLE_COURSE_RACING', 'MOTOR_RACING', 'HIIT', 'SPIN', 'JIU_JITSU', 'MANUAL_LABOR', 'CRICKET', 'PICKLEBALL', 'INLINE_SKATING', 'BOX_FITNESS', 'SPIKEBALL', 'WHEELCHAIR_PUSHING', 'PADDLE_TENNIS', 'BARRE', 'STAGE_PERFORMANCE', 'HIGH_STRESS_WORK', 'PARKOUR', 'GAELIC_FOOTBALL', 'HURLING_CAMOGIE', 'CIRCUS_ARTS', 'MASSAGE_THERAPY', 'STRENGTH_TRAINER', 'WATCHING_SPORTS', 'ASSAULT_BIKE', 'KICKBOXING', 'STRETCHING', 'TABLE_TENNIS', 'BADMINTON', 'NETBALL', 'SAUNA', 'DISC_GOLF', 'YARD_WORK', 'AIR_COMPRESSION', 'PERCUSSIVE_MASSAGE', 'PAINTBALL', 'ICE_SKATING', 'HANDBALL', 'F45_TRAINING', 'PADEL', 'BARRYS', 'DEDICATED_PARENTING', 'STROLLER_WALKING', 'STROLLER_JOGGING', 'TODDLERWEARING', 'BABYWEARING', 'BARRE3', 'HOT_YOGA', 'STADIUM_STEPS', 'POLO', 'MUSICAL_PERFORMANCE', 'KITE_BOARDING', 'DOG_WALKING', 'WATER_SKIING', 'WAKEBOARDING', 'COOKING', 'CLEANING', 'PUBLIC_SPEAKING', name='whoopsport'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('start', sa.DateTime(), nullable=False),
    sa.Column('end', sa.DateTime(), nullable=False),
    sa.Column('timezone_offset', sa.String(), nullable=False),
    sa.Column('score_state', sa.Enum('SCORED', 'PENDING_SCORE', 'UNSCORABLE', name='whoopscorestate'), nullable=False),
    sa.Column('raw_score', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('strain', sa.Float(), nullable=True),
    sa.Column('average_heart_rate', sa.Integer(), nullable=True),
    sa.Column('max_heart_rate', sa.Integer(), nullable=True),
    sa.Column('kilojoule', sa.Float(), nullable=True),
    sa.Column('percent_recorded', sa.Float(), nullable=True),
    sa.Column('distance_meter', sa.Float(), nullable=True),
    sa.Column('altitude_gain_meter', sa.Float(), nullable=True),
    sa.Column('altitude_change_meter', sa.Float(), nullable=True),
    sa.Column('zone_zero_milli', sa.Integer(), nullable=True),
    sa.Column('zone_one_milli', sa.Integer(), nullable=True),
    sa.Column('zone_two_milli', sa.Integer(), nullable=True),
    sa.Column('zone_three_milli', sa.Integer(), nullable=True),
    sa.Column('zone_four_milli', sa.Integer(), nullable=True),
    sa.Column('zone_five_milli', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['whoop_users.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('whoop_recovery',
    sa.Column('cycle_id', sa.Integer(), nullable=False),
    sa.Column('sleep_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('score_state', sa.Enum('SCORED', 'PENDING_SCORE', 'UNSCORABLE', name='whoopscorestate'), nullable=False),
    sa.Column('raw_score', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('user_calibrating', sa.Boolean(), nullable=True),
    sa.Column('recovery_score', sa.Integer(), nullable=True),
    sa.Column('resting_heart_rate', sa.Integer(), nullable=True),
    sa.Column('hrv_rmssd_milli', sa.Float(), nullable=True),
    sa.Column('spo2_percentage', sa.Float(), nullable=True),
    sa.Column('skin_temp_celsius', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['cycle_id'], ['whoop_cycles.id'], ),
    sa.ForeignKeyConstraint(['sleep_id'], ['whoop_sleep.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['whoop_users.user_id'], ),
    sa.PrimaryKeyConstraint('cycle_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('whoop_recovery')
    op.drop_table('whoop_workouts')
    op.drop_table('whoop_sleep')
    op.drop_table('whoop_cycles')
    op.drop_table('whoop_users')
    # ### end Alembic commands ###
